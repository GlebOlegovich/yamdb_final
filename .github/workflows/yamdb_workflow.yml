name: Django-app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    -
      uses: actions/checkout@v2

    -
      name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - 
      name: Install dependencies
      # pip install -r api_yamdb/requirements.txt 
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort

    - 
      name: Test with flake8
      # echo "::set-output name=mix-compile--warnings-as-errors::$(python -m flake8)"
      # python -m flake8
      run: |
        export Flake_8=python -m flake8  echo "::set-env name=Flake8::$Flake_8"
      id: run_tests

    - run: echo $Flake8 
    - 
      name: Pytest
      run: |
        pytest
        cat
    - 
      name: Send message if Tests failed
      # Если был exit 1
      if: ${{ failure() }}
      # if: ${{ steps.run_tests.result=='failure' }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        # ${{ join(steps.run_tests.outputs.*, '\n') }}
        message: |

          Ошибка при тестировании - ${{ github.repository }}


  # build_and_push_to_docker_hub:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - 
  #       name: Check out the repo
  #       uses: actions/checkout@v2

  #     - 
  #       name: Login to Docker 
  #       uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - 
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - 
  #       name: Push to Docker Hub
  #       uses: docker/build-push-action@v2 
  #       with:
  #         context: api_yamdb/
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/yamdb_api:latest
  
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push_to_docker_hub
  #   if:
  #     contains('
  #       refs/heads/main
  #       refs/heads/master
  #     ', github.ref)
  #   steps:
  #   - 
  #     name: executing remote ssh commands to deploy
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.HOST_SERVER }}
  #       username: ${{ secrets.USER_SERVER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       passphrase: ${{ secrets.PASSPHRASE_SERVER }}
  #       script: |
  #         sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yamdb_api:latest
  #         # sudo docker-compose down -v
  #         sudo docker-compose down

  #         rm .env -f
  #         touch .env
  #         echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #         echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #         echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #         echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #         echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #         echo DB_PORT=${{ secrets.DB_PORT }} >> .env

  #         sudo docker-compose up -d 
  #         sudo docker-compose exec -T web python manage.py migrate

  #         # echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('${{ secrets.ADMIN_USERNAME }}', 'example@example.com', '${{ secrets.ADMIN_PASSWORD }}')" | sudo docker-compose exec -T web python manage.py shell
  #         echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='${{ secrets.ADMIN_USERNAME }}').exists() or User.objects.create_superuser('${{ secrets.ADMIN_USERNAME }}', 'godleib@yandex.ru', '${{ secrets.ADMIN_PASSWORD }}')" | sudo docker-compose exec -T web python manage.py shell
  #         echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@example.com', 'admin')" | sudo docker-compose exec -T web python manage.py shell

  #         # без -T была ошибка с TTY связанная
  #         sudo docker-compose exec -T web python manage.py collectstatic --no-input
  #         # Удаляем старые образы
  #         sudo docker system prune -af
  #         # Удаляем старые тома
  #         sudo docker volume prune -f

  # send_message:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #   - 
  #     name: send message
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: |
  #           Твой коммит в ${{ github.repository }} успешно прошел все тесты и задеплоен.
  #           Комментарий успешного комита: ${{ github.event.commits[0].message }}
            
  #           Просмотр изменений: https://github.com/${{ github.repository }}/commit/${{github.sha}}